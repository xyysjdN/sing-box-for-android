name: CI

on:
  workflow_dispatch:
    inputs:
      version-code:
        description: 'version code'
        required: false
        default: '1'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  libbox:
    name: Build Libbox
    runs-on: ubuntu-latest
    outputs:
      libbox-hash: ${{ steps.parse-vars.outputs.commitHash }}
      release-notes: ${{ steps.parse-vars.outputs.releaseNotes }}
      version-name: ${{ steps.parse-vars.outputs.versionName }}

    steps:
    - uses: actions/checkout@v4
      with:
        ref: test-main-ech
        repository: ${{ github.repository_owner }}/sing-box
        fetch-depth: 0
        path: sing-box

    - id: parse-vars
      run: |
        cd sing-box
        echo "commitHash=$(git rev-parse --short=12 HEAD)" >> $GITHUB_OUTPUT
        echo "versionName=$(git describe --tags --abbrev=0 | grep -oP '(\d+\.){1,2}\d+')" >> $GITHUB_OUTPUT
        echo "releaseNotes=sing-box $(git describe --tags --abbrev=0)-$(git rev-parse --short=12 HEAD)" >> $GITHUB_OUTPUT
        echo "IMAGE_OS=${ImageOS}" >> $GITHUB_ENV
        echo "JAVA_HOME=${JAVA_HOME_17_X64}" >> $GITHUB_ENV
        echo "${JAVA_HOME_17_X64}/bin" >> $GITHUB_PATH

    - name: Cache Libbox
      id: cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/sing-box-for-android/app/libs/libbox.aar
        key: libbox-${{ steps.parse-vars.outputs.versionName }}-${{ steps.parse-vars.outputs.commitHash }}
        lookup-only: true

    - name: Setup Golang
      id: setup-go
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/setup-go@v5
      with:
        go-version: '^1.21'
        cache: false

    - uses: actions/cache@v4
      if: steps.cache.outputs.cache-hit != 'true'
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: setup-go-${{ runner.os }}-${{ env.IMAGE_OS }}-${{ steps.setup-go.outputs.go-version }}-${{ hashFiles('./sing-box/**/go.sum') }}
        restore-keys: |
          setup-go-${{ runner.os }}-${{ env.IMAGE_OS }}-${{ steps.setup-go.outputs.go-version }}-

    - name: Build Libbox
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p sing-box-for-android/app/libs
        cd sing-box
        sed -i 's/\(const fixedVersion =\).*/\1 "'${ANDROID_NDK_HOME##*/}'"/g' ./cmd/internal/build_shared/sdk.go
        make lib_install
        make lib_android

  build:
    name: Build for Android
    runs-on: ubuntu-latest
    needs:
      - libbox

    steps:
    - uses: actions/checkout@v4
      with:
        path: sing-box-for-android

    - name: Cache Libbox
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ github.workspace }}/sing-box-for-android/app/libs/libbox.aar
        key: libbox-${{ needs.libbox.outputs.version-name }}-${{ needs.libbox.outputs.libbox-hash }}
        fail-on-cache-miss: true

    - run: |
        echo "JAVA_HOME=${JAVA_HOME_21_X64}" >> ${GITHUB_ENV}
        echo "NDK_VERSION=${ANDROID_NDK_HOME##*/}" >> ${GITHUB_ENV}

    - name: Cache Gradle
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('./sing-box-for-android/**/*.gradle*', './sing-box-for-android/**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Gradle Build
      env:
        VERSION_NAME: ${{ needs.libbox.outputs.version-name }}
        VERSION_CODE_MINOR: ${{ github.event.inputs.version-code }}
        RELEASE_NOTES: ${{ needs.libbox.outputs.release-notes }}
        KEYSTORE_PROPERTIES: ${{ secrets.KEYSTORE_PROPERTIES }}
      run: |
        cd sing-box-for-android
        echo "sdk.dir=${ANDROID_HOME}" > local.properties
        echo "${KEYSTORE_PROPERTIES}" | base64 -d > keystore.properties
        echo "VERSION_CODE=$(date +%Y%m%d)$(printf '%02d' ${VERSION_CODE_MINOR:-1})" > version.properties
        echo "VERSION_NAME=${VERSION_NAME}" >> version.properties
        echo "RELEASE_NOTES=${RELEASE_NOTES}" >> version.properties
        echo "GO_VERSION=$(go version | cut -d' ' -f3)" >> version.properties
        ./gradlew :app:assembleOtherRelease --parallel --configure-on-demand --info
        ./gradlew --stop
        mkdir -p ../release
        cp ./app/build/outputs/apk/other/release/*.apk ../release/

    - run: npm i @actions/artifact@2.1.1

    - name: Upload Artifacts
      uses: actions/github-script@v7
      env:
        RootDirectory: ${{ github.workspace }}/release
      with:
        script: |
          const { DefaultArtifactClient } = require('@actions/artifact');
          const fs = require('fs');

          const artifact = new DefaultArtifactClient();
          const { RootDirectory } = process.env
          const patterns = [ RootDirectory + '/*.apk']
          const globber = await glob.create(patterns.join('\n'))

          let jobs = [];
          for await (const file of globber.globGenerator()) {
            const artifactName = file.split(/[\\/]/).pop();
            jobs.push(artifact.uploadArtifact(artifactName, [file], RootDirectory));
          }
          Promise.all(jobs);
